"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveSiteData = exports.resolveUserConfig = exports.resolveConfig = exports.resolveSiteDataByRoute = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const globby_1 = __importDefault(require("globby"));
const alias_1 = require("./alias");
var shared_1 = require("./shared");
Object.defineProperty(exports, "resolveSiteDataByRoute", { enumerable: true, get: function () { return shared_1.resolveSiteDataByRoute; } });
const debug = require('debug')('vitepress:config');
const resolve = (root, file) => path_1.default.resolve(root, `.vitepress`, file);
async function resolveConfig(root = process.cwd()) {
    const userConfig = await resolveUserConfig(root);
    if (userConfig.vueOptions) {
        console.warn(chalk_1.default.yellow(`[vitepress] "vueOptions" option has been renamed to "vue".`));
    }
    if (userConfig.exclude) {
        console.warn(chalk_1.default.yellow(`[vitepress] "exclude" option has been renamed to "ssrExclude".`));
    }
    const site = await resolveSiteData(root, userConfig);
    const srcDir = path_1.default.resolve(root, userConfig.srcDir || '.');
    // resolve theme path
    const userThemeDir = resolve(root, 'theme');
    const themeDir = (await fs_extra_1.default.pathExists(userThemeDir))
        ? userThemeDir
        : alias_1.DEFAULT_THEME_PATH;
    const config = {
        root,
        srcDir,
        site,
        themeDir,
        pages: await globby_1.default(['**.md'], {
            cwd: srcDir,
            ignore: ['**/node_modules', ...(userConfig.srcExclude || [])]
        }),
        configPath: resolve(root, 'config.js'),
        outDir: resolve(root, 'dist'),
        tempDir: path_1.default.resolve(alias_1.APP_PATH, 'temp'),
        markdown: userConfig.markdown,
        alias: alias_1.resolveAliases(themeDir),
        vue: userConfig.vue,
        vite: userConfig.vite
    };
    return config;
}
exports.resolveConfig = resolveConfig;
async function resolveUserConfig(root) {
    // load user config
    const configPath = resolve(root, 'config.js');
    const hasUserConfig = await fs_extra_1.default.pathExists(configPath);
    // always delete cache first before loading config
    delete require.cache[configPath];
    const userConfig = hasUserConfig ? require(configPath) : {};
    if (hasUserConfig) {
        debug(`loaded config at ${chalk_1.default.yellow(configPath)}`);
    }
    else {
        debug(`no config file found.`);
    }
    return userConfig;
}
exports.resolveUserConfig = resolveUserConfig;
async function resolveSiteData(root, userConfig) {
    userConfig = userConfig || (await resolveUserConfig(root));
    return {
        lang: userConfig.lang || 'en-US',
        title: userConfig.title || 'VitePress',
        description: userConfig.description || 'A VitePress site',
        base: userConfig.base ? userConfig.base.replace(/([^/])$/, '$1/') : '/',
        head: userConfig.head || [],
        themeConfig: userConfig.themeConfig || {},
        locales: userConfig.locales || {},
        customData: userConfig.customData || {}
    };
}
exports.resolveSiteData = resolveSiteData;
//# sourceMappingURL=config.js.map